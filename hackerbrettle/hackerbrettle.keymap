// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <zmk-helpers/helper.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LGUI k1  &ht LALT k2  &ht LCTRL k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RCTRL k2  &ht RALT k3  &ht RGUI k4

// Layers
#define BASE 0
#define NUMSYM 1
#define NAVFN 2
#define SYSTEM 3
#define CMD 4
#define MC_ONESHOT 5
#define MC_JUMP 6
#define MC_M 7
#define MC_S 8
#define MC_N 9
#define MC_T 10
#define MC_E 11
#define MC_C 12
#define MC_X 13
#define BASE_LAYERS BASE 

#define ___ &trans
#define toM &sl 7
#define toS &sl 8
#define toN &sl 9
#define toT &sl 10
#define toE &sl 11
#define toP &sl 12
#define toX &sl 13

/* How quickly Combo keys must be pressed together */
#define COMBO_TIMEOUT_MS 30
/* Macro timers; can be increased for systems that don't like 0ms Macros */
#define FAST_MACRO_TAP_MS 0
#define FAST_MACRO_WAIT_MS 0

/* Create a ZMK Behavior without having to specify the name three times */
#define ZMK_BEHAVIOR(NAME, ...) \
    / { \
        behaviors { \
            NAME: NAME { \
                __VA_ARGS__ \
            }; \
        }; \
    };
    
/* Mod-Morph helper */
#define MOD_MORPH(NAME, STANDARD, MORPHED, MODS, ...) \
    ZMK_BEHAVIOR(NAME, \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <STANDARD>, <MORPHED>; \
        mods = <(MODS)>; \
        __VA_ARGS__ \
    )

/* Mod-Morph that sends another key when Shift is held */
#define SHIFT_MORPH(NAME, LOWER, UPPER) \
    MOD_MORPH(NAME, LOWER, UPPER, MOD_LSFT|MOD_RSFT)

/* Custom base layer punctuation */
SHIFT_MORPH(comma_q, &kp COMMA, &kp QMARK)
SHIFT_MORPH(dot_ex, &kp DOT, &kp EXCL)
SHIFT_MORPH(eql_ex, &kp EQUAL, &kp BSLH)
SHIFT_MORPH(star_ex, &kp STAR, &kp PIPE)
SHIFT_MORPH(plus_ex, &kp PLUS, &kp FSLH)

/* Combo helper */
#define ZMK_COMBO(NAME, TIMEOUT_MS, KEY_POSITIONS, LAYERS, BINDINGS) \
    NAME { \
        timeout-ms = <TIMEOUT_MS>; \
        key-positions = <KEY_POSITIONS>; \
        layers = <LAYERS>; \
        bindings = <BINDINGS>; \
    }; \
/* Limit to base layers and use defined timer for most Combos */
#define COMBO(NAME, KEY_POSITIONS, BINDINGS) \
    ZMK_COMBO(NAME, COMBO_TIMEOUT_MS, KEY_POSITIONS, BASE_LAYERS, BINDINGS)

/* Wrap ZMK_MACRO to avoid needing to specify Macro node */
#define ZMKMACRO(NAME, ...) \
    / { \
        macros { \
            ZMK_MACRO(NAME, __VA_ARGS__) \
        }; \
    };
/* Instant key press Macro helper using defined timers */
#define FAST_MACRO(NAME, BINDINGS) \
    NAME: NAME { \
        compatible = "zmk,behavior-macro"; \
        #binding-cells = <0>; \
        tap-ms = <FAST_MACRO_TAP_MS>; \
        wait-ms = <FAST_MACRO_WAIT_MS>; \
        bindings = <BINDINGS>; \
    };
 
/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
        

        /* Let Caps Word continue when typing Underscore */
        caps_word {
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
        };

        hm: hold_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            bindings = <&mo>, <&sl>;
        };
 
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUMSYM NAVFN>;
            then-layer = <SYSTEM>;
        };
    };
 
    macros {
        FAST_MACRO(delword, &macro_press &kp LSFT &macro_press &kp LCTL &macro_tap &kp LEFT &macro_release &kp LCTL &macro_release &kp LSFT &macro_tap &kp DEL)
        FAST_MACRO(delline, &macro_tap &kp END &macro_press &kp LSFT &macro_tap &kp HOME &macro_release &kp LSFT &macro_tap &kp DELETE &macro_tap &kp DELETE)
        FAST_MACRO(mc_caret, &macro_tap &kp CARET &macro_tap &kp SPACE)
        FAST_MACRO(mc_tilde, &macro_tap &kp TILDE &macro_tap &kp SPACE)
        FAST_MACRO(mc_apos, &macro_tap &kp APOS &macro_tap &kp SPACE)
        
        // UNICORN (workaround for missing/non-functioning leader key in ZMK)
        // one-key sequences
        FAST_MACRO(u_q,  &macro_press &kp LGUI
                &macro_tap &kp Q
                &macro_release &kp LGUI)
        FAST_MACRO(u_f,  &macro_tap &kp LSHFT &kp LSHFT)
        FAST_MACRO(u_p,  &macro_tap &kp HOME &kp HOME &kp SLASH &kp SLASH)
        FAST_MACRO(u_b,  &macro_press &kp LCTL
                &macro_tap &kp X
                &macro_release &kp LCTL
                &macro_tap &kp SLASH &kp STAR &kp RET
                &macro_press &kp LCTL
                &macro_tap &kp V
                &macro_release &kp LCTL
                &macro_tap &kp STAR &kp SLASH &kp RET)
        FAST_MACRO(u_j,  &macro_press &kp LCTL
                &macro_press &kp LSHFT
                &macro_tap &kp KP_SLASH
                &macro_release &kp LSHFT
                &macro_release &kp LCTL)
        FAST_MACRO(u_l,  &macro_tap &kp GRAVE &kp GRAVE &kp GRAVE &kp SPACE
                &macro_press &kp LSHFT
                &macro_tap &kp RET
                &macro_release &kp LSHFT
                &macro_press &kp LCTL
                &macro_tap &kp V
                &macro_release &kp LCTL
                &macro_press &kp LSHFT
                &macro_tap &kp RET
                &macro_release &kp LSHFT
                &macro_tap &kp GRAVE &kp GRAVE &kp GRAVE &kp SPACE)
        FAST_MACRO(u_u,  &macro_tap &kp END
                &macro_press &kp LSHFT
                &macro_tap &kp HOME &kp HOME
                &macro_release &kp LSHFT
                &macro_press &kp LCTL
                &macro_tap &kp C
                &macro_release &kp LCTL
                &macro_tap &kp END &kp RET &kp HOME &kp SLASH &kp SLASH &kp SPACE
                &macro_press &kp LCTL
                &macro_tap &kp V
                &macro_release &kp LCTL
                &macro_tap &kp HOME &kp UP)
        FAST_MACRO(u_a,  &macro_tap &kp MINUS &kp GT)
        FAST_MACRO(u_r,  &macro_press &kp LGUI
                &macro_tap &kp R
                &macro_release &kp LGUI)
        FAST_MACRO(u_s,  &macro_tap &kp PRINTSCREEN)
        FAST_MACRO(u_t,  &macro_tap &macro_press &kp LGUI
                &macro_press &kp LALT
                &macro_tap &kp K
                &macro_release &kp LALT
                &macro_release &kp LGUI)
        FAST_MACRO(u_m,  &macro_tap &kp MINUS &kp SPACE &kp LBKT &kp SPACE &kp RBKT &kp SPACE)
        FAST_MACRO(u_n,  &macro_tap &kp LPAR &kp RPAR &kp LEFT)
        FAST_MACRO(u_e,  &macro_tap &kp LBKT &kp RBKT &kp LEFT)
        FAST_MACRO(u_i,  &macro_tap &kp LBRC &kp RBRC &kp LEFT)
        FAST_MACRO(u_o,  &macro_tap &kp GRAVE &kp GRAVE &kp LEFT)
        FAST_MACRO(u_z,  &macro_press &kp LCTL
                &macro_tap &kp Z
                &macro_release &kp LCTL)
        FAST_MACRO(u_x,  &macro_press &kp LCTL
                &macro_tap &kp Y
                &macro_release &kp LCTL)
        FAST_MACRO(u_c,  &macro_press &kp LCTL
                &macro_tap &kp C
                &macro_release &kp LCTL)
        FAST_MACRO(u_d,  &macro_press &kp LCTL
                &macro_tap &kp X
                &macro_release &kp LCTL)
        FAST_MACRO(u_v,  &macro_press &kp LCTL
                &macro_tap &kp V
                &macro_release &kp LCTL)
        FAST_MACRO(u_k,  &macro_press &kp LCTL
                &macro_press &kp LALT
                &macro_tap &kp V
                &macro_release &kp LALT
                &macro_release &kp LCTL)
        FAST_MACRO(u_h,  &macro_press &kp LCTL
                &macro_press &kp LSHFT
                &macro_tap &kp V
                &macro_release &kp LSHFT
                &macro_release &kp LCTL)
        FAST_MACRO(u_apo,  &macro_tap &kp DQT &kp SPACE &kp DQT &kp SPACE &kp LEFT)
        FAST_MACRO(u_lft,  &macro_press &kp LGUI
                &macro_press &kp LSHFT
                &macro_tap &kp LEFT
                &macro_release &kp LSHFT
                &macro_release &kp LGUI)
        FAST_MACRO(u_inlft,  &macro_press &kp LALT
                &macro_tap &kp TAB
                &macro_release &kp LALT)
        FAST_MACRO(u_inrgt,  &macro_press &kp LALT
                &macro_press &kp LSHFT
                &macro_tap &kp TAB
                &macro_release &kp LSHFT
                &macro_release &kp LALT)
        FAST_MACRO(u_rgt,  &macro_press &kp LGUI
                &macro_press &kp LSHFT
                &macro_tap &kp RIGHT
                &macro_release &kp LSHFT
                &macro_release &kp LGUI)
        
        // two-key sequences
        // tbd
    };
     
    combos {
        compatible = "zmk,combos";
        
        COMBO(cmb_caps, 4 5, &caps_word)
        COMBO(cmb_tab, 12 13, &kp TAB)
        COMBO(cmb_sfttab, 2 3, &kp LS(TAB))
        COMBO(cmb_bksp, 17 18, &kp BSPC)
        COMBO(cmb_del, 7 8, &kp DEL)
        COMBO(cmb_delword, 27 28, &delword)
        COMBO(cmb_delline, 28 29, &delline)
        COMBO(cmb_ctlx, 20 21, &kp LC(X))
        COMBO(cmb_ctlc, 21 22, &kp LC(C))
        COMBO(cmb_ctlv, 22 23, &kp LC(V))
    };
 // cheat-sheet for indexes
 //       ┌──┐              ┌──┐
 //    ┌──┤2 ├──┬──┐  ┌──┬──┤7 ├──┐
 // ┌──┤1 ├──┤3 │4 │  │5 │6 ├──┤8 ├──┐
 // │0 ├──┤12├──┼──┤  ├──┼──┤17├──┤9 │
 // ├──┤11├──┤13│14│  │15│16├──┤18├──┤
 // │10├──┤22├──┼──┤  ├──┼──┤27├──┤19│
 // ├──┤21├──┤23│24│  │25│26├──┤28├──┤
 // │20├──┘  └──┴──┘  └──┴──┘  └──┤29│
 // └──┘     ┌──┬──┐  ┌──┬──┐     └──┘
 //          │30│31│  │32│33│
 //          └──┴──┘  └──┴──┘

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤f    │                             │u    ├─────┐
 // ┌─────┤w    │     ├─────┬─────┐     ┌─────┬─────┤     │y    ├─────┐
 // │q    │     ├─────┤p    │b    │     │j    │l    ├─────┤     │- _  │
 // │     ├─────┤s    │     │     │     │     │     │e    ├─────┤     │
 // ├─────┤r    │     ├─────┼─────┤     ├─────┼─────┤     │i    ├─────┤
 // │a    │     ├─────┤t    │g    │     │m    │n    ├─────┤     │o    │
 // │     ├─────┤c    │     │     │     │     │     │, ?  ├─────┤     │
 // ├─────┤x    │     ├─────┼─────┤     ├─────┼─────┤     │. !  ├─────┤
 // │z    │     ├─────┤d    │v    │     │k    │h    ├─────┤     │' "  │
 // │     ├─────┘     │     │     │     │     │     │     └─────┤     │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘

            &kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &kp MINUS
            &kp A      &kp R      &kp S      &kp T      &kp G          &kp M      &kp N      &kp E      &kp I      &kp O
            &ht LGUI Z &ht LALT X &ht LCTL C &ht LSHFT D &kp V          &kp K      &ht RSHFT H &ht RCTL COMMA &ht RALT DOT &mc_apos
                              &mt LSHFT SPACE   &hm NUMSYM MC_JUMP &hm NUMSYM MC_ONESHOT &hm NAVFN CMD                                     
            >;
        };

        numsym_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤8    │                             │3    ├─────┐
 // ┌─────┤7    │     ├─────┬─────┐     ┌─────┬─────┤     │4    ├─────┐
 // │6    │     ├─────┤9    │0    │     │1    │2    ├─────┤     │5    │
 // │     ├─────┤= \  │     │     │     │     │     │[    ├─────┤     │
 // ├─────┤@    │     ├─────┼─────┤     ├─────┼─────┤     │{    ├─────┤
 // │~    │     ├─────┤* |  │+ /  │     │:    │(    ├─────┤     │<    │
 // │     ├─────┤^    │     │     │     │     │     │] ,  ├─────┤     │
 // ├─────┤%    │     ├─────┼─────┤     ├─────┼─────┤     │} .  ├─────┤
 // │$    │     ├─────┤#    │&    │     │;    │)    ├─────┤     │>    │
 // │     ├─────┘     │     │     │     │     │     │     └─────┤     │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            &kp N6     &kp N7     &kp N8     &kp N9     &kp N0         &kp N1     &kp N2     &kp N3     &kp N4     &kp N5
            &mc_tilde  &kp AT     &kp EQUAL  &kp STAR   &kp PLUS       &kp COLON  &kp LPAR   &kp LBKT   &kp LBRC   &kp LS(COMMA)
            &kp DOLLAR &kp PRCNT  &mc_caret  &kp HASH   &kp AMPS       &kp SEMI   &kp RPAR   &kp RBKT   &kp RBRC   &kp LS(DOT)
                               &mt LSHFT SPACE   &hm NUMSYM MC_JUMP &hm NUMSYM MC_ONESHOT &hm NAVFN CMD                                     
            >;
        };

        navfn_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤F3   │                             │↑    ├─────┐
 // ┌─────┤F2   │     ├─────┬─────┐     ┌─────┬─────┤     │PgDwn├─────┐
 // │F1   │     ├─────┤F4   │F5   │     │Top  │PgUp ├─────┤     │Bottm│
 // │     ├─────┤F8   │     │     │     │     │     │↓    ├─────┤     │
 // ├─────┤F7   │     ├─────┼─────┤     ├─────┼─────┤     │→    ├─────┤
 // │F6   │     ├─────┤F9   │F10  │     │Home │←    ├─────┤     │End  │
 // │     ├─────┤CtrlC│     │     │     │     │     │SelLn├─────┤     │
 // ├─────┤F12  │     ├─────┼─────┤     ├─────┼─────┤     │WrdRg├─────┤
 // │F11  │     ├─────┤CtrlX│CtrlV│     │SelWL│WrdLf├─────┤     │SelWR│
 // │     ├─────┘     │     │     │     │     │     │     └─────┤     │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            &kp F1     &kp F2     &kp F3     &kp F4     &kp F5         &kp LC(HOME) &kp PG_UP &kp UP    &kp PG_DN  &kp LC(END)
            &kp F6     &kp F7     &kp F8     &kp F9     &kp F10        &kp HOME   &kp LEFT   &kp DOWN   &kp RIGHT  &kp END
            &kp F11    &kp F12    &kp LC(C)  &kp LC(X)  &kp LC(V)      &kp LS(LC(LEFT)) &kp LC(LEFT) &kp LS(DOWN) &kp LC(RIGHT) &kp LS(LC(RIGHT))
                              &mt LSHFT SPACE   &hm NUMSYM MC_JUMP &hm NUMSYM MC_ONESHOT &hm NAVFN CMD                                     
            >;
        };

        system_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤play │                             │mouse├─────┐
 // ┌─────┤track│pause├─────┬─────┐     ┌─────┬─────┤up   │msWhl├─────┐
 // │Boot │prev ├─────┤track│vol  │     │msWhl│msWhl├─────┤right│mouse│
 // │     ├─────┤stop │next │up   │     │up   │left │mouse├─────┤acc2 │
 // ├─────┤RGB  │     ├─────┼─────┤     ├─────┼─────┤down │mouse├─────┤
 // │RGB  │Lum+ ├─────┤RGB  │vol  │     │msWhl│mouse├─────┤right│mouse│
 // │Sat+ ├─────┤RGB  │Hue+ │down │     │down │left │mouse├─────┤acc1 │
 // ├─────┤RGB  │Mode ├─────┼─────┤     ├─────┼─────┤btn3 │mouse├─────┤
 // │RGB  │Lum- ├─────┤RGB  │vol  │     │RGB  │mouse├─────┤btn2 │mouse│
 // │Sat- ├─────┘     │Hue- │mute │     │OnOff│btn1 │     └─────┤acc0 │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
           &sys_reset  ___     ___     ___    &bt BT_SEL 0       ___     ___     ___     ___    &sys_reset
          &bootloader  ___     ___     ___    &bt BT_SEL 1       ___     ___     ___     ___    &bootloader
            ___     ___     ___    &bt BT_CLR &bt BT_SEL 2       ___     ___     ___     ___     ___
                                             ___     ___         ___     ___
            >;
        };

        cmd_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤     │                             │ü    ├─────┐
 // ┌─────┤Esc  │     ├─────┬─────┐     ┌─────┬─────┤     │Del  ├─────┐
 // │     │     ├─────┤Sft+ │     │     │     │Sft+ ├─────┤     │     │
 // │     ├─────┤ß    │Tab  │     │     │     │Retrn│€    ├─────┤     │
 // ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤     │BkSp ├─────┤
 // │ä    │     ├─────┤Tab  │     │     │     │Retrn├─────┤     │ö    │
 // │     ├─────┤     │     │     │     │     │     │     ├─────┤     │
 // ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤     │Del  ├─────┤
 // │     │     ├─────┤     │     │     │     │     ├─────┤Wrd  │Del  │
 // │     ├─────┘     │     │     │     │     │     │     └─────┤Line │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │     │     │     │     │     │
 //                   │     │     │     │     │     │
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            ___       &kp ESC ___       &kp LS(TAB) ___         ___     &kp LS(RET) &kp RA(Y)      &kp DEL    ___
            &kp RA(Q) ___     &kp RA(S) &kp TAB     ___         ___     &kp RET     &kp LA(LC(N5)) &kp BSPC   &kp RA(P)
            ___       ___     ___       ___         ___         ___     ___         ___            &delword   &delline
                                           ___      ___         ___     ___
            >;
        };
        
// special unicorn layers (as replacement for leader key functionality in ZMK)
// one-shot leader key
/*             ┌─────┐                             ┌─────┐
 *       ┌─────┤Doubl│                             │Dupli├─────┐
 * ┌─────┤     │Shift├─────┬─────┐     ┌─────┬─────┤Line │     ├─────┐
 * │Lock │     ├─────┤Comnt│Multi│     │MltCm│Multi├─────┤     │     │
 * │     ├─────┤PrtSc│     │Comnt│     │InteJ│Code │[]   ├─────┤     │
 * ├─────┤WinR │     ├─────┼─────┤     ├─────┼─────┤     │{}   ├─────┤
 * │->   │     ├─────┤Mute/│     │     │- [ ]│()   ├─────┤     │´´   │
 * │     ├─────┤CtrlC│Unmte│     │     │     │     │     ├─────┤     │
 * ├─────┤CtrlY│     ├─────┼─────┤     ├─────┼─────┤     │     ├─────┤
 * │CtrlZ│     ├─────┤CtrlX│CtrlV│     │Alt  │Shift├─────┤     │""   │
 * │     ├─────┘     │     │     │     │CtrlV│CtrlV│     └─────┤     │
 * └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 *                   ┌─────┬─────┐     ┌─────┬─────┐
 *                   │WinLf│AltTb│     │Shift│WinRg│
 *                   │     │     │     │AltTb│     │
 *                   └─────┴─────┘     └─────┴─────┘*/
        mc_oneshot {
            bindings = <
            &u_q  ___   &u_f  &u_p  &u_b     &u_j  &u_l  &u_u  ___   ___   
            &u_a  &u_r  &u_s  &u_t  ___      &u_m  &u_n  &u_e  &u_i  &u_o   
            &u_z  &u_x  &u_c  &u_d  &u_v     &u_k  &u_h  ___   ___   &u_apo
                         &u_lft &u_inlft     &u_inrgt &u_rgt  
            >;
        };
        
        mc_jump {
            bindings = <
            ___   ___   ___   toP   ___      ___   ___   ___   ___   ___   
            ___   ___   toS   toT   ___      toM   toN   toE   ___   ___   
            ___   toX   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// mongo commands
/*
<list of commands here :) >
*/  
        mc_m {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// status messages
/*
<list of commands here :) >
*/  
        mc_s {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// names
/*
<list of commands here :) >
*/  
        mc_n {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// text
/*
<list of commands here :) >
*/  
        mc_t {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// emojis
/*
<list of commands here :) >
*/  
        mc_e {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// code snippets
/*
<list of commands here :) >
*/  
        mc_p {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
// execute programs
/*
<list of commands here :) >
*/  
        mc_x {
            bindings = <
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
            ___   ___   ___   ___   ___      ___   ___   ___   ___   ___   
                        ___   &to 0                &to 0 ___   
            >;
        };
    };
};
