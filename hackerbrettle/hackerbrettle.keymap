// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "inc/helpers.h"

// Layers
#define BASE 0
#define NUMSYM 1
#define NAVFN 2
#define SYSTEM 3
#define CMD 4
#define MC_ONESHOT 5
#define MC_JUMP 6
#define MC_M 7
#define MC_S 8
#define MC_N 9
#define MC_T 10
#define MC_E 11
#define MC_C 12
#define MC_X 13
#define BASE_LAYERS BASE 

#define ___ &trans
#define toM &sl 7
#define toS &sl 8
#define toN &sl 9
#define toT &sl 10
#define toE &sl 11
#define toP &sl 12
#define toX &sl 13

/* How quickly Combo keys must be pressed together */
#define COMBO_TIMEOUT_MS 30
/* Macro timers; can be increased for systems that don't like 0ms Macros */
#define FAST_MACRO_TAP_MS 0
#define FAST_MACRO_WAIT_MS 0

/* Custom base layer punctuation */
SHIFT_MORPH(comma_qust, &kp COMMA, &kp QMARK)
SHIFT_MORPH(dot_exc, &kp DOT, &kp EXCL)
SHIFT_MORPH(eql_bksl, &kp EQUAL, &kp BSLH)
SHIFT_MORPH(star_pipe, &kp STAR, &kp PIPE)
SHIFT_MORPH(plus_slsh, &kp PLUS, &kp FSLH)

MY_HOLD_TAP(dot_morph, &dot_exc, &kp)
MY_HOLD_TAP(comma_morph, &comma_qust, &kp)
MY_HOLD_TAP(apos_morph, &mc_apos, &kp)

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        /* Let Caps Word continue when typing Underscore */
        caps_word {
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
        };

        hm: hold_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            bindings = <&mo>, <&sl>;
        };
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUMSYM NAVFN>;
            then-layer = <SYSTEM>;
        };
    };

#include "inc/leader_macros.h" 
#include "inc/combos.h" 
    
 // cheat-sheet for indexes
 //       ┌──┐              ┌──┐
 //    ┌──┤2 ├──┬──┐  ┌──┬──┤7 ├──┐
 // ┌──┤1 ├──┤3 │4 │  │5 │6 ├──┤8 ├──┐
 // │0 ├──┤12├──┼──┤  ├──┼──┤17├──┤9 │
 // ├──┤11├──┤13│14│  │15│16├──┤18├──┤
 // │10├──┤22├──┼──┤  ├──┼──┤27├──┤19│
 // ├──┤21├──┤23│24│  │25│26├──┤28├──┤
 // │20├──┘  └──┴──┘  └──┴──┘  └──┤29│
 // └──┘     ┌──┬──┐  ┌──┬──┐     └──┘
 //          │30│31│  │32│33│
 //          └──┴──┘  └──┴──┘
/*
 * combos
 *             ┌─────┐                             ┌─────┐
 *       ┌─────┤     │                             │     ├─────┐
 * ┌─────┤     │ +   ├─────┬─────┐     ┌─────┬─────┤  +=Del=+  ├─────┐
 * │     │     ├──\+SftTab+│   +===Caps===+  │     ├─────┤     │     │
 * │     ├─────┤     │     │     │     │     │     │     ├─────┤     │
 * ├─────┤     │ +   ├─────┼─────┤     ├─────┼─────┤  +=BkSp=+ ├─────┤
 * │     │     ├──\=+=Tab=+│     │     │     │     ├─────┤     │     │
 * │     ├─────┤     │     │     │     │     │     │     ├─────┤     │
 * ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤+=DelWord=+├─────┤
 * │     │     ├─────┤     │     │     │     │     ├─────┤+=DelLine=+│
 * │     ├─────┘     │     │     │     │     │     │     └─────┤     │
 * └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 *                   ┌─────┬─────┐     ┌─────┬─────┐
 *                   │     │     │     │     │     │
 *                   │     │     │     │+=system==+│
 *                   └─────┴─────┘     └─────┴─────┘
 */

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤f    │                             │u    ├─────┐
 // ┌─────┤w    │     ├─────┬─────┐     ┌─────┬─────┤     │y    ├─────┐
 // │q    │     ├─────┤p    │b    │     │j    │l    ├─────┤     │- _  │
 // │     ├─────┤s    │     │     │     │     │     │e    ├─────┤     │
 // ├─────┤r    │     ├─────┼─────┤     ├─────┼─────┤     │i    ├─────┤
 // │a    │     ├─────┤t    │g    │     │m    │n    ├─────┤     │o    │
 // │     ├─────┤c    │     │     │     │     │     │, ?  ├─────┤     │
 // ├─────┤x    │lctl ├─────┼─────┤     ├─────┼─────┤rctl │. !  ├─────┤
 // │z    │lalt ├─────┤d    │v    │     │k    │h    ├─────┤ralt │' "  │
 // │lgui ├─────┘     │lshft│     │     │     │rshft│     └─────┤rgui │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘

            &kp Q      &kp W      &kp F      &kp P       &kp B          &kp J      &kp L       &kp U               &kp Y             &kp MINUS
            &kp A      &kp R      &kp S      &kp T       &kp G          &kp M      &kp N       &kp E               &kp I             &kp O
            &ht LGUI Z &ht LALT X &ht LCTL C &ht LSHFT D &kp V          &kp K      &ht RSHFT H &comma_morph RCTL 0 &dot_morph RALT 0 &apos_morph RGUI 0
                              &mt LSHFT SPACE   &hm NUMSYM MC_JUMP &hm NUMSYM MC_ONESHOT  &hm NAVFN CMD                                     
            >;
        };

        numsym_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤8    │                             │3    ├─────┐
 // ┌─────┤7    │     ├─────┬─────┐     ┌─────┬─────┤     │4    ├─────┐
 // │6    │     ├─────┤9    │0    │     │1    │2    ├─────┤     │5    │
 // │     ├─────┤= \  │     │     │     │     │     │[    ├─────┤     │
 // ├─────┤@    │     ├─────┼─────┤     ├─────┼─────┤     │{    ├─────┤
 // │~    │     ├─────┤* |  │+ /  │     │:    │(    ├─────┤     │<    │
 // │     ├─────┤^    │     │     │     │     │     │] ,  ├─────┤     │
 // ├─────┤%    │     ├─────┼─────┤     ├─────┼─────┤     │} .  ├─────┤
 // │$    │     ├─────┤#    │&    │     │;    │)    ├─────┤     │>    │
 // │     ├─────┘     │     │     │     │     │     │     └─────┤     │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            &kp N6     &kp N7     &kp N8     &kp N9     &kp N0         &kp N1     &kp N2     &kp N3     &kp N4     &kp N5
            &mc_tilde  &kp AT     &eql_bksl  &star_pipe &plus_slsh     &kp COLON  &kp LPAR   &kp LBKT   &kp LBRC   &kp LS(COMMA)
            &kp DOLLAR &kp PRCNT  &mc_caret  &kp HASH   &kp AMPS       &kp SEMI   &kp RPAR   &kp RBKT   &kp RBRC   &kp LS(DOT)
                              &mt LSHFT SPACE   &hm NUMSYM MC_JUMP &hm NUMSYM MC_ONESHOT &hm NAVFN CMD                                     
            >;
        };

        navfn_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤F3   │                             │↑    ├─────┐
 // ┌─────┤F2   │     ├─────┬─────┐     ┌─────┬─────┤     │PgDwn├─────┐
 // │F1   │     ├─────┤F4   │F5   │     │Top  │PgUp ├─────┤     │Bottm│
 // │     ├─────┤F8   │     │     │     │     │     │↓    ├─────┤     │
 // ├─────┤F7   │     ├─────┼─────┤     ├─────┼─────┤     │→    ├─────┤
 // │F6   │     ├─────┤F9   │F10  │     │Home │←    ├─────┤     │End  │
 // │     ├─────┤CtrlC│     │     │     │     │     │SelLn├─────┤     │
 // ├─────┤F12  │     ├─────┼─────┤     ├─────┼─────┤     │WrdRg├─────┤
 // │F11  │     ├─────┤CtrlX│CtrlV│     │SelWL│WrdLf├─────┤     │SelWR│
 // │     ├─────┘     │     │     │     │     │     │     └─────┤     │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            &kp F1     &kp F2     &kp F3     &kp F4     &kp F5         &kp LC(HOME) &kp PG_UP &kp UP    &kp PG_DN  &kp LC(END)
            &kp F6     &kp F7     &kp F8     &kp F9     &kp F10        &kp HOME   &kp LEFT   &kp DOWN   &kp RIGHT  &kp END
            &kp F11    &kp F12    &kp LC(C)  &kp LC(X)  &kp LC(V)      &kp LS(LC(LEFT)) &kp LC(LEFT) &kp LS(DOWN) &kp LC(RIGHT) &kp LS(LC(RIGHT))
                              &mt LSHFT SPACE   &hm NUMSYM MC_JUMP &hm NUMSYM MC_ONESHOT &hm NAVFN CMD                                     
            >;
        };

        system_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤play │                             │mouse├─────┐
 // ┌─────┤track│pause├─────┬─────┐     ┌─────┬─────┤up   │msWhl├─────┐
 // │Boot │prev ├─────┤track│vol  │     │msWhl│msWhl├─────┤right│Boot │
 // │     ├─────┤stop │next │up   │     │up   │left │mouse├─────┤     │
 // ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤down │mouse├─────┤
 // │     │     ├─────┤     │vol  │     │msWhl│mouse├─────┤right│mouse│
 // │     ├─────┤     │     │down │     │down │left │mouse├─────┤acc1 │
 // ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤btn3 │mouse├─────┤
 // │     │     ├─────┤     │vol  │     │     │mouse├─────┤btn2 │mouse│
 // │     ├─────┘     │     │mute │     │     │btn1 │     └─────┤acc0 │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │space│2lead│     │1lead│cmd  │
 //                   │shift│numsy│     │numsy│navfn│
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            &bootloader &kp C_PREV &kp C_PP   &kp C_NEXT &kp C_VOL_UP     ___    ___    ___    ___    &bootloader
            ___         ___        &kp C_STOP ___        &kp C_VOL_DN     ___    ___    ___    ___    ___
            ___         ___        ___        ___        &kp C_MUTE       ___    ___    ___    ___    ___
                                                       ___     ___         ___     ___
            >;
        };

        cmd_layer {
 //             ┌─────┐                             ┌─────┐
 //       ┌─────┤     │                             │ü    ├─────┐
 // ┌─────┤Esc  │     ├─────┬─────┐     ┌─────┬─────┤     │Del  ├─────┐
 // │     │     ├─────┤Sft+ │     │     │     │Sft+ ├─────┤     │     │
 // │     ├─────┤ß    │Tab  │     │     │     │Retrn│€    ├─────┤     │
 // ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤     │BkSp ├─────┤
 // │ä    │     ├─────┤Tab  │     │     │     │Retrn├─────┤     │ö    │
 // │     ├─────┤     │     │     │     │     │     │     ├─────┤     │
 // ├─────┤     │     ├─────┼─────┤     ├─────┼─────┤     │Del  ├─────┤
 // │     │     ├─────┤     │     │     │     │     ├─────┤Wrd  │Del  │
 // │     ├─────┘     │     │     │     │     │     │     └─────┤Line │
 // └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 //                   ┌─────┬─────┐     ┌─────┬─────┐
 //                   │     │     │     │     │     │
 //                   │     │     │     │     │     │
 //                   └─────┴─────┘     └─────┴─────┘
            bindings = <
            ___       &kp ESC ___       &kp LS(TAB) ___         ___     &kp LS(RET) &kp RA(Y)      &kp DEL    ___
            &kp RA(Q) ___     &kp RA(S) &kp TAB     ___         ___     &kp RET     &kp LA(LC(N5)) &kp BSPC   &kp RA(P)
            ___       ___     ___       ___         ___         ___     ___         ___            &delword   &delline
                                           ___      ___         ___     ___
            >;
        };
        
// special unicorn layers (as replacement for leader key functionality in ZMK)
// one-shot leader key
/*             ┌─────┐                             ┌─────┐
 *       ┌─────┤Doubl│                             │Dupli├─────┐
 * ┌─────┤     │Shift├─────┬─────┐     ┌─────┬─────┤Line │     ├─────┐
 * │Lock │     ├─────┤Comnt│Multi│     │MltCm│Multi├─────┤     │     │
 * │     ├─────┤PrtSc│     │Comnt│     │InteJ│Code │[]   ├─────┤     │
 * ├─────┤WinR │     ├─────┼─────┤     ├─────┼─────┤     │{}   ├─────┤
 * │->   │     ├─────┤Mute/│     │     │- [ ]│()   ├─────┤     │´´   │
 * │     ├─────┤CtrlC│Unmte│     │     │     │     │     ├─────┤     │
 * ├─────┤CtrlY│     ├─────┼─────┤     ├─────┼─────┤     │     ├─────┤
 * │CtrlZ│     ├─────┤CtrlX│CtrlV│     │Alt  │Shift├─────┤     │""   │
 * │     ├─────┘     │     │     │     │CtrlV│CtrlV│     └─────┤     │
 * └─────┘           └─────┴─────┘     └─────┴─────┘           └─────┘
 *                   ┌─────┬─────┐     ┌─────┬─────┐
 *                   │WinLf│AltTb│     │Shift│WinRg│
 *                   │     │     │     │AltTb│     │
 *                   └─────┴─────┘     └─────┴─────┘*/
        mc_oneshot {
            bindings = <
            &u_q  ___   &u_f  &u_p  &u_b     &u_j  &u_l  &u_u  ___   ___   
            &u_a  &u_r  &u_s  &u_t  ___      &u_m  &u_n  &u_e  &u_i  &u_o   
            &u_z  &u_x  &u_c  &u_d  &u_v     &u_k  &u_h  ___   ___   &u_apo
                         &u_lft &u_inlft     &u_inrgt &u_rgt  
            >;
        };

#include "inc/twoleader_keymap.h"
       
    };
};
